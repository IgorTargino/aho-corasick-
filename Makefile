# Nome do Compilador
CC = gcc

# Flags do Compilador Comuns
CFLAGS_COMMON = -Wall -Wextra -std=c99 -g
CFLAGS_DEBUG_SPECIFIC = -DDEBUG_PRINTS
CFLAGS_RELEASE_SPECIFIC = -O2

# Diret√≥rio de Inclus√£o de Cabe√ßalhos
INCLUDE_DIR = ./include

# Diret√≥rio dos Arquivos Fonte
SRC_DIR = ./src

# Diret√≥rio de Sa√≠da para Arquivos Compilados
BUILD_DIR = ./build

# Diret√≥rio para Relat√≥rios de An√°lise
REPORTS_DIR = ./reports

# --- Configura√ß√µes da Aplica√ß√£o Principal ---
APP_EXECUTAVEL_NAME = filtro_conteudo_app
APP_EXECUTAVEL = $(BUILD_DIR)/$(APP_EXECUTAVEL_NAME)
APP_SOURCES = $(SRC_DIR)/main.c $(SRC_DIR)/aho_corasick.c $(SRC_DIR)/aho_queue.c
APP_OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(APP_SOURCES:.c=.o)))

# --- Configura√ß√µes do Runner de Testes ---
TEST_EXECUTAVEL_NAME = test_runner
TEST_EXECUTAVEL = $(BUILD_DIR)/$(TEST_EXECUTAVEL_NAME)
TEST_SOURCES = $(SRC_DIR)/test_aho_corasick.c $(SRC_DIR)/aho_corasick.c $(SRC_DIR)/aho_queue.c
TEST_OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(TEST_SOURCES:.c=.o)))

# --- Configura√ß√µes do Valgrind ---
TIMESTAMP = $(shell date +%Y%m%d_%H%M%S)
VALGRIND_FLAGS = --leak-check=full --show-leak-kinds=all --track-origins=yes
VALGRIND_MASSIF_FLAGS = --tool=massif --stacks=yes --detailed-freq=1 --massif-out-file=$(REPORTS_DIR)/massif_$(TIMESTAMP).out
VALGRIND_CALLGRIND_FLAGS = --tool=callgrind --collect-jumps=yes --collect-systime=yes --callgrind-out-file=$(REPORTS_DIR)/callgrind_$(TIMESTAMP).out

# --- Regras do Makefile ---

# Regra padr√£o: compila a aplica√ß√£o principal para depura√ß√£o
all: debug

# --- Regras para a Aplica√ß√£o Principal ---
debug: CFLAGS = $(CFLAGS_COMMON) $(CFLAGS_DEBUG_SPECIFIC) -I$(INCLUDE_DIR)
debug: $(APP_EXECUTAVEL)

release: CFLAGS = $(CFLAGS_COMMON) $(CFLAGS_RELEASE_SPECIFIC) -I$(INCLUDE_DIR)
release: $(APP_EXECUTAVEL)

$(APP_EXECUTAVEL): $(APP_OBJECTS) | $(BUILD_DIR)
	@echo "----------------------------------------------------"
	@echo "Linkando a aplicacao principal: $@"
	@echo "----------------------------------------------------"
	$(CC) $(CFLAGS) $^ -o $@
	@echo ""
	@echo "$@ compilado com sucesso!"
	@echo "Use 'make run' para executar."

# --- Regras para os Testes ---
test: CFLAGS = $(CFLAGS_COMMON) $(CFLAGS_DEBUG_SPECIFIC) -I$(INCLUDE_DIR)
test: $(TEST_EXECUTAVEL)

$(TEST_EXECUTAVEL): $(TEST_OBJECTS) | $(BUILD_DIR)
	@echo "----------------------------------------------------"
	@echo "Linkando o runner de testes: $@"
	@echo "----------------------------------------------------"
	$(CC) $(CFLAGS) $^ -o $@
	@echo ""
	@echo "$@ compilado com sucesso!"
	@echo "Use 'make run_test' para executar os testes."

# --- Regras Gen√©ricas e Auxiliares ---

# Regra para criar o diret√≥rio de build, se n√£o existir
$(BUILD_DIR):
	@echo "Criando diretorio de build: $(BUILD_DIR)..."
	@mkdir -p $(BUILD_DIR)

# Regra para criar o diret√≥rio de relat√≥rios, se n√£o existir
$(REPORTS_DIR):
	@echo "Criando diretorio de relatorios: $(REPORTS_DIR)..."
	@mkdir -p $(REPORTS_DIR)

# Regra gen√©rica para compilar arquivos .c em arquivos .o dentro do BUILD_DIR
$(BUILD_DIR)/%.o: $(SRC_DIR)/%.c | $(BUILD_DIR)
	@echo "Compilando $< para $@ ..."
	$(CC) $(CFLAGS) -I$(INCLUDE_DIR) -c $< -o $@

# --- Regras de Execu√ß√£o ---
run: debug
	@echo "----------------------------------------------------"
	@echo "Executando aplicacao (debug): $(APP_EXECUTAVEL)"
	@echo "----------------------------------------------------"
	$(APP_EXECUTAVEL)

run_release: release
	@echo "----------------------------------------------------"
	@echo "Executando aplicacao (release): $(APP_EXECUTAVEL)"
	@echo "----------------------------------------------------"
	$(APP_EXECUTAVEL)

run_test: test
	@echo "----------------------------------------------------"
	@echo "Executando testes: $(TEST_EXECUTAVEL)"
	@echo "----------------------------------------------------"
	$(TEST_EXECUTAVEL)

# --- Regras de An√°lise de Mem√≥ria com Valgrind ---

# Verifica se o Valgrind est√° instalado
check_valgrind:
	@which valgrind > /dev/null || (echo "‚ùå Erro: Valgrind nao encontrado!" && \
	echo "   Para instalar: sudo apt-get install valgrind" && \
	echo "   Ou: sudo yum install valgrind" && exit 1)
	@echo "‚úÖ Valgrind encontrado: $$(valgrind --version)"

# An√°lise b√°sica de vazamentos de mem√≥ria
valgrind: debug check_valgrind | $(REPORTS_DIR)
	@echo "===================================================="
	@echo "üîç VALGRIND - An√°lise de Vazamentos de Mem√≥ria"
	@echo "===================================================="
	@echo "Executando: $(APP_EXECUTAVEL)"
	@echo "Flags: $(VALGRIND_FLAGS)"
	@echo "Relat√≥rio: $(REPORTS_DIR)/valgrind_leak_$(TIMESTAMP).log"
	@echo "----------------------------------------------------"
	valgrind $(VALGRIND_FLAGS) $(APP_EXECUTAVEL) 2>&1 | tee $(REPORTS_DIR)/valgrind_leak_$(TIMESTAMP).log
	@echo ""
	@echo "‚úÖ An√°lise de vazamentos conclu√≠da"
	@echo "üìÑ Relat√≥rio salvo em: $(REPORTS_DIR)/valgrind_leak_$(TIMESTAMP).log"

# An√°lise detalhada de uso de mem√≥ria (Massif)
valgrind_memory: debug check_valgrind | $(REPORTS_DIR)
	@echo "===================================================="
	@echo "üìä VALGRIND MASSIF - An√°lise Detalhada de Mem√≥ria"
	@echo "===================================================="
	@echo "Executando: $(APP_EXECUTAVEL)"
	@echo "Flags: $(VALGRIND_MASSIF_FLAGS)"
	@echo "Arquivo de sa√≠da: $(REPORTS_DIR)/massif_$(TIMESTAMP).out"
	@echo "----------------------------------------------------"
	valgrind $(VALGRIND_MASSIF_FLAGS) $(APP_EXECUTAVEL)
	@echo ""
	@echo "‚úÖ An√°lise de mem√≥ria conclu√≠da"
	@echo "üìà Para visualizar o relat√≥rio execute:"
	@echo "   ms_print $(REPORTS_DIR)/massif_$(TIMESTAMP).out"
	@echo "   ou: make show_massif_report"

# An√°lise de performance e chamadas (Callgrind)
valgrind_profile: debug check_valgrind | $(REPORTS_DIR)
	@echo "===================================================="
	@echo "‚ö° VALGRIND CALLGRIND - An√°lise de Performance"
	@echo "===================================================="
	@echo "Executando: $(APP_EXECUTAVEL)"
	@echo "Flags: $(VALGRIND_CALLGRIND_FLAGS)"
	@echo "Arquivo de sa√≠da: $(REPORTS_DIR)/callgrind_$(TIMESTAMP).out"
	@echo "----------------------------------------------------"
	valgrind $(VALGRIND_CALLGRIND_FLAGS) $(APP_EXECUTAVEL)
	@echo ""
	@echo "‚úÖ An√°lise de performance conclu√≠da"
	@echo "üìä Para visualizar o relat√≥rio execute:"
	@echo "   kcachegrind $(REPORTS_DIR)/callgrind_$(TIMESTAMP).out (GUI)"
	@echo "   ou: callgrind_annotate $(REPORTS_DIR)/callgrind_$(TIMESTAMP).out (terminal)"

# Visualizar relat√≥rio do Massif mais recente
show_massif_report:
	@echo "===================================================="
	@echo "üìà Visualizando Relat√≥rio Massif Mais Recente"
	@echo "===================================================="
	@if ls $(REPORTS_DIR)/massif_*.out 1> /dev/null 2>&1; then \
	    LATEST_MASSIF=$$(ls -t $(REPORTS_DIR)/massif_*.out | head -1); \
	    echo "Arquivo mais recente: $$LATEST_MASSIF"; \
	    echo "----------------------------------------------------"; \
	    ms_print $$LATEST_MASSIF; \
	else \
	    echo "‚ùå Nenhum arquivo massif encontrado em $(REPORTS_DIR)"; \
	    echo "   Execute 'make valgrind_memory' primeiro"; \
	fi

# Listar todos os relat√≥rios dispon√≠veis
list_reports:
	@echo "===================================================="
	@echo "üìã RELAT√ìRIOS DISPON√çVEIS EM $(REPORTS_DIR)"
	@echo "===================================================="
	@if [ -d "$(REPORTS_DIR)" ]; then \
	    echo "An√°lises de Vazamentos:"; \
	    ls -la $(REPORTS_DIR)/valgrind_*leak*.log 2>/dev/null || echo "  Nenhum encontrado"; \
	    echo ""; \
	    echo "An√°lises de Mem√≥ria (Massif):"; \
	    ls -la $(REPORTS_DIR)/massif_*.out 2>/dev/null || echo "  Nenhum encontrado"; \
	    echo ""; \
	    echo "An√°lises de Performance (Callgrind):"; \
	    ls -la $(REPORTS_DIR)/callgrind_*.out 2>/dev/null || echo "  Nenhum encontrado"; \
	    echo ""; \
	    echo "Estat√≠sticas do Sistema:"; \
	    ls -la $(REPORTS_DIR)/time_stats_*.log 2>/dev/null || echo "  Nenhum encontrado"; \
	    echo ""; \
	    TOTAL_SIZE=$$(du -sh $(REPORTS_DIR) 2>/dev/null | cut -f1 || echo "0"); \
	    echo "Espa√ßo total usado: $$TOTAL_SIZE"; \
	else \
	    echo "‚ùå Diret√≥rio $(REPORTS_DIR) n√£o existe"; \
	    echo "   Execute alguma an√°lise primeiro"; \
	fi

# Estat√≠sticas do sistema (GNU time)
time_stats: release | $(REPORTS_DIR)
	@echo "===================================================="
	@echo "‚è±Ô∏è  GNU TIME - Estat√≠sticas do Sistema"
	@echo "===================================================="
	@echo "Executando: $(APP_EXECUTAVEL)"
	@echo "Relat√≥rio: $(REPORTS_DIR)/time_stats_$(TIMESTAMP).log"
	@echo "----------------------------------------------------"
	/usr/bin/time -v $(APP_EXECUTAVEL) 2>&1 | tee $(REPORTS_DIR)/time_stats_$(TIMESTAMP).log
	@echo ""
	@echo "‚úÖ Estat√≠sticas coletadas"
	@echo "üìÑ Relat√≥rio salvo em: $(REPORTS_DIR)/time_stats_$(TIMESTAMP).log"

# An√°lise completa (todos os tipos de an√°lise)
analyze_all: debug test | $(REPORTS_DIR)
	@echo "===================================================="
	@echo "üî¨ AN√ÅLISE COMPLETA - Todos os Testes de Mem√≥ria"
	@echo "===================================================="
	@echo "üìÅ Relat√≥rios ser√£o salvos em: $(REPORTS_DIR)"
	@echo "‚è∞ Timestamp da execu√ß√£o: $(TIMESTAMP)"
	@echo ""
	@echo "1/3 - Vazamentos da Aplica√ß√£o..."
	@$(MAKE) valgrind --no-print-directory
	@echo ""
	@echo "2/3 - Mem√≥ria da Aplica√ß√£o..."
	@$(MAKE) valgrind_memory --no-print-directory
	@echo ""
	@echo "3/3 - Estat√≠sticas da Aplica√ß√£o..."
	@$(MAKE) time_stats --no-print-directory
	@echo ""
	@echo "===================================================="
	@echo "‚úÖ AN√ÅLISE COMPLETA CONCLU√çDA"
	@echo "===================================================="
	@echo "üìã Relat√≥rios gerados em $(REPORTS_DIR):"
	@echo "   - valgrind_leak_$(TIMESTAMP).log"
	@echo "   - massif_$(TIMESTAMP).out"
	@echo "   - callgrind_$(TIMESTAMP).out"
	@echo "   - time_stats_$(TIMESTAMP).log"
	@echo ""
	@echo "üìä Para visualizar relat√≥rios:"
	@echo "   make list_reports          - Lista todos os relat√≥rios"
	@echo "   make show_massif_report    - Mostra an√°lise de mem√≥ria"
	@echo "   kcachegrind $(REPORTS_DIR)/callgrind_$(TIMESTAMP).out"

# Gerar relat√≥rio resumo de todos os testes
generate_summary_report: | $(REPORTS_DIR)
	@echo "===================================================="
	@echo "üìä GERANDO RELAT√ìRIO RESUMO"
	@echo "===================================================="
	@SUMMARY_FILE="$(REPORTS_DIR)/summary_report_$(TIMESTAMP).md"; \
	echo "# Relat√≥rio Resumo de An√°lise - $$(date)" > $$SUMMARY_FILE; \
	echo "" >> $$SUMMARY_FILE; \
	echo "## Informa√ß√µes do Sistema" >> $$SUMMARY_FILE; \
	echo "\`\`\`" >> $$SUMMARY_FILE; \
	uname -a >> $$SUMMARY_FILE; \
	echo "\`\`\`" >> $$SUMMARY_FILE; \
	echo "" >> $$SUMMARY_FILE; \
	echo "## Arquivos de Relat√≥rio Gerados" >> $$SUMMARY_FILE; \
	if [ -d "$(REPORTS_DIR)" ]; then \
	    find $(REPORTS_DIR) -name "*$(TIMESTAMP)*" -type f | sort >> $$SUMMARY_FILE; \
	fi; \
	echo "" >> $$SUMMARY_FILE; \
	echo "## Resumo de Tamanhos" >> $$SUMMARY_FILE; \
	echo "\`\`\`" >> $$SUMMARY_FILE; \
	ls -lh $(REPORTS_DIR)/*$(TIMESTAMP)* 2>/dev/null >> $$SUMMARY_FILE || echo "Nenhum arquivo encontrado"; \
	echo "\`\`\`" >> $$SUMMARY_FILE; \
	echo "‚úÖ Relat√≥rio resumo gerado: $$SUMMARY_FILE"

# --- Regra de Limpeza ---
clean:
	@echo "----------------------------------------------------"
	@echo "Limpando diretorio de build: $(BUILD_DIR)..."
	@echo "----------------------------------------------------"
	rm -rf $(BUILD_DIR)
	@echo "‚úÖ Diret√≥rio de build limpo"

# Limpeza completa (inclui relat√≥rios)
clean_all: clean
	@echo "----------------------------------------------------"
	@echo "Limpando relat√≥rios de an√°lise: $(REPORTS_DIR)..."
	@echo "----------------------------------------------------"
	rm -rf $(REPORTS_DIR)
	@echo "‚úÖ Limpeza completa conclu√≠da"

# Limpeza seletiva de relat√≥rios antigos (mant√©m os 5 mais recentes)
clean_old_reports:
	@echo "===================================================="
	@echo "üßπ LIMPANDO RELAT√ìRIOS ANTIGOS"
	@echo "===================================================="
	@if [ -d "$(REPORTS_DIR)" ]; then \
	    echo "Mantendo os 5 relat√≥rios mais recentes de cada tipo..."; \
	    for type in massif callgrind valgrind_leak valgrind_test_leak time_stats; do \
	        echo "Processando: $$type"; \
	        ls -t $(REPORTS_DIR)/$$type*.* 2>/dev/null | tail -n +6 | xargs -r rm -v; \
	    done; \
	    echo "‚úÖ Limpeza de relat√≥rios antigos conclu√≠da"; \
	else \
	    echo "‚ùå Diret√≥rio $(REPORTS_DIR) n√£o existe"; \
	fi

# Help - mostra todos os comandos dispon√≠veis
help:
	@echo "===================================================="
	@echo "üõ†Ô∏è  COMANDOS DISPON√çVEIS DO MAKEFILE"
	@echo "===================================================="
	@echo ""
	@echo "üì¶ COMPILA√á√ÉO:"
	@echo "   make debug          - Compila aplica√ß√£o (modo debug)"
	@echo "   make release        - Compila aplica√ß√£o (modo release)"
	@echo "   make test           - Compila testes"
	@echo "   make all            - Compila aplica√ß√£o (debug) [padr√£o]"
	@echo ""
	@echo "‚ñ∂Ô∏è  EXECU√á√ÉO:"
	@echo "   make run            - Executa aplica√ß√£o (debug)"
	@echo "   make run_release    - Executa aplica√ß√£o (release)"
	@echo "   make run_test       - Executa testes"
	@echo ""
	@echo "üîç AN√ÅLISE DE MEM√ìRIA (VALGRIND):"
	@echo "   make valgrind       - An√°lise de vazamentos (app)"
	@echo "   make valgrind_memory - An√°lise detalhada de mem√≥ria (app)"
	@echo "   make valgrind_profile - An√°lise de performance (app)"
	@echo ""
	@echo "üìä RELAT√ìRIOS:"
	@echo "   make show_massif_report - Mostra relat√≥rio Massif mais recente"
	@echo "   make list_reports   - Lista todos os relat√≥rios dispon√≠veis"
	@echo "   make generate_summary_report - Gera relat√≥rio resumo"
	@echo "   make time_stats     - Estat√≠sticas do sistema (app)"
	@echo ""
	@echo "üî¨ AN√ÅLISE COMPLETA:"
	@echo "   make analyze_all    - Executa todas as an√°lises"
	@echo ""
	@echo "üßπ LIMPEZA:"
	@echo "   make clean          - Remove arquivos compilados"
	@echo "   make clean_all      - Remove compilados + relat√≥rios"
	@echo "   make clean_old_reports - Remove relat√≥rios antigos (mant√©m 5)"
	@echo ""
	@echo "‚ùì AJUDA:"
	@echo "   make help           - Mostra esta mensagem"
	@echo ""
	@echo "üìÅ ESTRUTURA DE DIRET√ìRIOS:"
	@echo "   $(BUILD_DIR)/     - Arquivos compilados"
	@echo "   $(REPORTS_DIR)/   - Relat√≥rios de an√°lise"
	@echo ""
	@echo "===================================================="

# Phony targets
.PHONY: all clean clean_all clean_old_reports debug release test run run_release run_test \
	    check_valgrind valgrind valgrind_test valgrind_memory valgrind_memory_test \
	    valgrind_profile show_massif_report list_reports time_stats time_stats_test \
	    analyze_all generate_summary_report help $(BUILD_DIR) $(REPORTS_DIR)